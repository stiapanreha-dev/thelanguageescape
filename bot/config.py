"""
Configuration module for The Language Escape Bot
Loads settings from environment variables
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Base paths
BASE_DIR = Path(__file__).resolve().parent.parent
MATERIALS_PATH = Path(os.getenv('MATERIALS_PATH', BASE_DIR / 'materials'))
CERTIFICATES_PATH = Path(os.getenv('CERTIFICATES_PATH', BASE_DIR / 'certificates'))
LOGS_PATH = Path(os.getenv('LOGS_PATH', BASE_DIR / 'logs'))

# Create directories if they don't exist
MATERIALS_PATH.mkdir(parents=True, exist_ok=True)
CERTIFICATES_PATH.mkdir(parents=True, exist_ok=True)
LOGS_PATH.mkdir(parents=True, exist_ok=True)

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in .env file")

ADMIN_TELEGRAM_ID = os.getenv('ADMIN_TELEGRAM_ID')
if ADMIN_TELEGRAM_ID:
    try:
        ADMIN_TELEGRAM_ID = int(ADMIN_TELEGRAM_ID)
    except ValueError:
        print("Warning: ADMIN_TELEGRAM_ID is not a valid integer")
        ADMIN_TELEGRAM_ID = None
else:
    print("Warning: ADMIN_TELEGRAM_ID is not set")
    ADMIN_TELEGRAM_ID = None

# Webhook Configuration
WEBHOOK_ENABLED = os.getenv('WEBHOOK_ENABLED', 'False').lower() == 'true'
WEBHOOK_DOMAIN = os.getenv('WEBHOOK_DOMAIN', '')
WEBHOOK_PATH = os.getenv('WEBHOOK_PATH', '/webhook/telegram')
WEBHOOK_PORT = int(os.getenv('WEBHOOK_PORT', '8443'))
WEBAPP_HOST = os.getenv('WEBAPP_HOST', '0.0.0.0')
WEBHOOK_URL = f"{WEBHOOK_DOMAIN}{WEBHOOK_PATH}" if WEBHOOK_DOMAIN else None

# YooKassa Configuration (Telegram Payments)
# YooKassa API credentials
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID', '1193453')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_PROVIDER_TOKEN', 'test_I3cKZsggMbi7Ct9XX8M1-B1fBblP0EyIj0q7HzS4_QE')
YOOKASSA_TEST_MODE = os.getenv('YOOKASSA_TEST_MODE', 'True').lower() == 'true'

# Legacy: Telegram Payments provider token (not used with direct API)
YOOKASSA_PROVIDER_TOKEN = os.getenv('YOOKASSA_PROVIDER_TOKEN')

# PostgreSQL Configuration
DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    DB_HOST = os.getenv('DB_HOST', 'localhost')
    DB_PORT = os.getenv('DB_PORT', '5432')
    DB_NAME = os.getenv('DB_NAME', 'language_escape')
    DB_USER = os.getenv('DB_USER', 'bot_user')
    DB_PASSWORD = os.getenv('DB_PASSWORD', '')
    DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# Course Configuration
COURSE_NAME = os.getenv('COURSE_NAME', 'The Language Escape')
COURSE_PRICE = int(os.getenv('COURSE_PRICE', '999'))
COURSE_CURRENCY = os.getenv('COURSE_CURRENCY', 'RUB')
COURSE_DAYS = int(os.getenv('COURSE_DAYS', '10'))
LIBERATION_CODE = os.getenv('LIBERATION_CODE', 'LIBERATION')

# Timezone and Schedule
TIMEZONE = os.getenv('TIMEZONE', 'Europe/Moscow')
DAILY_RELEASE_TIME = os.getenv('DAILY_RELEASE_TIME', '09:00')

# Reminders Configuration
MAX_REMINDERS = int(os.getenv('MAX_REMINDERS', '3'))
REMINDER_INTERVAL_HOURS = int(os.getenv('REMINDER_INTERVAL_HOURS', '24'))

# Logging Configuration
LOG_USER_ACTIONS = os.getenv('LOG_USER_ACTIONS', 'True').lower() in ('true', '1', 'yes', 'on')

# Tasks Configuration
MAX_TASK_ATTEMPTS = 3
VOICE_MIN_DURATION = 1  # seconds
VOICE_MAX_DURATION = 30  # seconds

# Cyberpunk Theme Messages
THEME_MESSAGES = {
    'welcome': """üîì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeoVoice, –°—É–±—ä–µ–∫—Ç X**

–°–µ—Ä–¥—Ü–µ —Å—Ç—É—á–∏—Ç: —á—Ç–æ –∂–¥—ë—Ç –≤ NeoVoice? **{days}-–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç A1-A2:** –≤–∑–ª–æ–º–∞–π –∫–æ–¥, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω —Å–≤–æ–±–æ–¥—ã! –¢–≤–æ—è —Ç–∞–π–Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞?

*–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è ShadowNet* —Ö–æ—á–µ—Ç —Å—Ç–µ—Ä–µ—Ç—å —Ç–µ–±—è. –ù–æ –µ—Å—Ç—å –Ω–∞–¥–µ–∂–¥–∞...

üí∞ **–¶–µ–Ω–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞:** {price} {currency}
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:** {days} –¥–Ω–µ–π
üéØ **–ú–∏—Å—Å–∏—è:** –°–æ–±–µ—Ä–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –≤—ã—Ä–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–±–æ–¥—É

‚ö†Ô∏è **–í—Ä–µ–º—è —É—Ö–æ–¥–∏—Ç.** –ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —Å—á–µ—Ç—É.

–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—à—å –ª–∏ —Ç—ã —Å–≤–æ–π –≥–æ–ª–æ—Å –∏ —Å–±–µ–∂–∏—à—å? **–û–ø–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –∏ –ø—Ä–∏–º–∏ –≤—ã–∑–æ–≤ —Å–µ–π—á–∞—Å –∂–µ!**""",

    'day_start': """‚ö° **–î–µ–Ω—å {day}/{total_days}: {title}**

{name}, —Ç–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≥–æ—Ç–æ–≤.
–°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç...

üé• –ü–æ—Å–º–æ—Ç—Ä–∏ –±—Ä–∏—Ñ–∏–Ω–≥
üìÑ –ü—Ä–æ—á–∏—Ç–∞–π —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã–µ
‚úÖ –í—ã–ø–æ–ª–Ω–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è

**–í—Ä–µ–º—è –≤–∑–ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.**""",

    'task_correct': """‚úÖ **–ü—Ä–æ—Ç–æ–∫–æ–ª –≤–∑–ª–æ–º–∞–Ω!**

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, {name}! –¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: **{letter}**

**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –£—Ä–æ–≤–µ–Ω—å {day}/{total_days}
**–§—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞:** `{code_fragment}`

–ü—Ä–æ–¥–æ–ª–∂–∞–π. –°–≤–æ–±–æ–¥–∞ –±–ª–∏–∂–µ.""",

    'task_incorrect': """‚ùå **–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ–π —Å–∏—Å—Ç–µ–º—ã**

{hint}

**–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:** {attempts}/3
–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –°—É–±—ä–µ–∫—Ç {name}. –ö–æ–¥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏.""",

    'reminder': """‚ö†Ô∏è **–°—É–±—ä–µ–∫—Ç {name}, —Ç–≤–æ—è –º–∏—Å—Å–∏—è –∂–¥—ë—Ç!**

–¢—ã –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω —É–∂–µ {hours}—á.
–ü—Ä–æ—Ç–æ–∫–æ–ª **–î–Ω—è {day}** –≤—Å—ë –µ—â—ë –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.

*–•–∞–∫–µ—Ä—ã –∂–¥—É—Ç. –ù–µ –¥–∞–π ShadowNet –ø–æ–±–µ–¥–∏—Ç—å.*

–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ–±–µ–≥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üîì""",

    'completion': """üéâ **–ö–û–î –û–°–í–û–ë–û–ñ–î–ï–ù–ò–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù!**

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, **{name}**!

–¢—ã –≤—ã—Ä–≤–∞–ª—Å—è –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏.
‚úÖ **10/10 –¥–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ**
üîë **–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥:** `{code}`

–¢–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–≤–æ–±–æ–¥—ã –≥–æ—Ç–æ–≤:
üìú [–°–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç]

**–ß—Ç–æ –¥–∞–ª—å—à–µ?**
üîó –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel}
üìö –°–ª–µ–¥—É—é—â–∏–π –∫—É—Ä—Å: {next_course}

–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–∞–∫–µ—Ä. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å."""
}

# Certificate Configuration
CERTIFICATE_TEMPLATE = {
    'width': 1920,
    'height': 1080,
    'background_color': '#0a0e27',
    'primary_color': '#00ff9f',
    'secondary_color': '#ff006e',
    'font_title': 'Arial',
    'font_size_title': 72,
    'font_size_name': 60,
    'font_size_code': 48,
}

# Logging Configuration
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# Feature Flags
ENABLE_VOICE_RECOGNITION = os.getenv('ENABLE_VOICE_RECOGNITION', 'True').lower() == 'true'
ENABLE_PAYMENTS = os.getenv('ENABLE_PAYMENTS', 'True').lower() == 'true'
ENABLE_REMINDERS = os.getenv('ENABLE_REMINDERS', 'True').lower() == 'true'

# Debug mode
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

def validate_config():
    """Validate critical configuration parameters"""
    errors = []

    if not TELEGRAM_BOT_TOKEN:
        errors.append("TELEGRAM_BOT_TOKEN is required")

    if ENABLE_PAYMENTS and (not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY):
        errors.append("YooKassa credentials required when ENABLE_PAYMENTS=True")

    if not DATABASE_URL:
        errors.append("DATABASE_URL is required")

    if errors:
        raise ValueError(f"Configuration errors: {', '.join(errors)}")

    return True

# Validate on import
if not DEBUG:
    try:
        validate_config()
    except ValueError as e:
        print(f"‚ö†Ô∏è  Configuration warning: {e}")
