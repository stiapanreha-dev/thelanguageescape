"""
Payment handlers for YooKassa API integration
Handles payment creation and status checking
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import COURSE_NAME, COURSE_PRICE, COURSE_CURRENCY, COURSE_DAYS
from bot.services.payment import PaymentService
from bot.database.models import User

logger = logging.getLogger(__name__)

# Create router for payment handlers
router = Router(name="payment")

# Global payment service (will be initialized in main.py)
payment_service: PaymentService = None


def init_payment_service(bot: Bot):
    """
    Initialize payment service with bot instance

    Args:
        bot: Bot instance
    """
    global payment_service
    payment_service = PaymentService(bot)
    logger.info("‚úÖ Payment service initialized with YooKassa API")


@router.message(Command("pay"))
async def cmd_pay(message: Message, session: AsyncSession):
    """
    Handle /pay command - create payment and send link
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_name = message.from_user.first_name or "–°—É–±—ä–µ–∫—Ç X"

    logger.info(f"User {user_id} ({user_name}) requested payment")

    # Check if payment service is initialized
    if not payment_service:
        await message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        logger.error("Payment service not initialized!")
        return

    # Get user from DB
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start —Å–Ω–∞—á–∞–ª–∞")
        return

    # Check if user already has access
    if user.has_access:
        await message.answer(
            "‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É!\n"
            f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {user.current_day}/{COURSE_DAYS}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /day —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        )
        return

    # Create payment
    try:
        payment_id, payment_url = await payment_service.create_payment(
            user_id=user.id,
            telegram_id=user_id,
            amount=COURSE_PRICE
        )

        if not payment_id or not payment_url:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return

        # Send payment link
        await payment_service.send_payment_link(
            chat_id=chat_id,
            payment_url=payment_url,
            amount=COURSE_PRICE
        )

        # Save pending payment to DB
        from bot.database.models import PaymentStatus
        await payment_service.save_payment_to_db(
            session=session,
            user_id=user.id,
            payment_id=payment_id,
            amount=COURSE_PRICE,
            currency=COURSE_CURRENCY,
            status=PaymentStatus.PENDING,
            description=f"{COURSE_NAME} - {COURSE_DAYS} –¥–Ω–µ–π",
            metadata={"telegram_id": str(user_id)}
        )

        logger.info(f"‚úÖ Payment link sent to user {user_id}: {payment_id}")

    except Exception as e:
        logger.error(f"Error creating payment for user {user_id}: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.callback_query(F.data == "buy_course")
async def callback_buy_course(callback: CallbackQuery, session: AsyncSession):
    """
    Handle 'Buy Course' button press
    """
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    logger.info(f"User {user_id} clicked 'Buy Course' button")

    # Check if payment service is initialized
    if not payment_service:
        await callback.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            show_alert=True
        )
        return

    # Get user from DB
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start —Å–Ω–∞—á–∞–ª–∞", show_alert=True)
        return

    # Check if user already has access
    if user.has_access:
        await callback.answer(
            "‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É!",
            show_alert=True
        )
        return

    # Create payment
    try:
        payment_id, payment_url = await payment_service.create_payment(
            user_id=user.id,
            telegram_id=user_id,
            amount=COURSE_PRICE
        )

        if not payment_id or not payment_url:
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                show_alert=True
            )
            return

        # Send payment link
        await payment_service.send_payment_link(
            chat_id=chat_id,
            payment_url=payment_url,
            amount=COURSE_PRICE
        )

        # Save pending payment to DB
        from bot.database.models import PaymentStatus
        await payment_service.save_payment_to_db(
            session=session,
            user_id=user.id,
            payment_id=payment_id,
            amount=COURSE_PRICE,
            currency=COURSE_CURRENCY,
            status=PaymentStatus.PENDING,
            description=f"{COURSE_NAME} - {COURSE_DAYS} –¥–Ω–µ–π",
            metadata={"telegram_id": str(user_id)}
        )

        await callback.answer("üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        logger.info(f"‚úÖ Payment link sent to user {user_id}: {payment_id}")

    except Exception as e:
        logger.error(f"Error creating payment for user {user_id}: {e}", exc_info=True)
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            show_alert=True
        )


@router.message(Command("check_payment"))
async def cmd_check_payment(message: Message, session: AsyncSession):
    """
    Manual payment status check (for testing and support)
    Usage: /check_payment <payment_id>
    """
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_payment <payment_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /check_payment 2d88ff3e-000f-5000-9000-1de86ca83bd5"
        )
        return

    payment_id = args[1].strip()

    logger.info(f"User {user_id} checking payment: {payment_id}")

    if not payment_service:
        await message.answer("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    try:
        status, payment_info = await payment_service.check_payment_status(payment_id)

        if status == "succeeded" and payment_info and payment_info.get("paid"):
            # Grant access
            success = await payment_service.grant_access_after_payment(
                session=session,
                telegram_id=user_id,
                payment_id=payment_id
            )

            if success:
                user_name = message.from_user.first_name or "–°—É–±—ä–µ–∫—Ç X"
                await payment_service.send_payment_success_message(
                    chat_id=message.chat.id,
                    user_name=user_name
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")

        elif status == "pending" or status == "waiting_for_capture":
            await message.answer(
                f"‚è≥ –ü–ª–∞—Ç—ë–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"ID: `{payment_id}`",
                parse_mode="Markdown"
            )
        elif status == "canceled":
            await message.answer(
                f"‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω\n"
                f"ID: `{payment_id}`",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}\n"
                f"ID: `{payment_id}`",
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error checking payment {payment_id}: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")


# Helper function to create payment keyboard
def get_payment_keyboard() -> InlineKeyboardMarkup:
    """Create inline keyboard with payment button"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí∞ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å - {COURSE_PRICE} {COURSE_CURRENCY}",
            callback_data="buy_course"
        )],
        [InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –∫—É—Ä—Å–µ",
            callback_data="course_info"
        )],
    ])
    return keyboard


@router.callback_query(F.data == "course_info")
async def callback_course_info(callback: CallbackQuery):
    """Show course information"""
    info_text = f"""
üìö **{COURSE_NAME}**

**–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:**
üéØ {COURSE_DAYS} –¥–Ω–µ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
üé¨ –í–∏–¥–µ–æ –≤ –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª–µ
üìÑ PDF –±—Ä–∏—Ñ–∏–Ω–≥–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π
‚úçÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
üí¨ –°–∏–º—É–ª—è—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
üèÜ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é

**–¶–µ–Ω–∞:** {COURSE_PRICE} {COURSE_CURRENCY}
**–£—Ä–æ–≤–µ–Ω—å:** A1-A2 (–ù–∞—á–∞–ª—å–Ω—ã–π)
**–§–æ—Ä–º–∞—Ç:** –í —Å–≤–æ—ë–º —Ç–µ–º–ø–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç

–ì–æ—Ç–æ–≤ —Å–±–µ–∂–∞—Ç—å –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏?
"""

    # Separate keyboard for course info screen (with Back button)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí∞ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å - {COURSE_PRICE} {COURSE_CURRENCY}",
            callback_data="buy_course"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_welcome"
        )],
    ])

    try:
        await callback.message.edit_text(
            info_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception:
        # Ignore if message is the same (user clicked button again)
        pass

    await callback.answer()


@router.callback_query(F.data == "back_to_welcome")
async def callback_back_to_welcome(callback: CallbackQuery):
    """Go back to welcome screen"""
    from bot.config import THEME_MESSAGES

    user_name = callback.from_user.first_name or "–°—É–±—ä–µ–∫—Ç X"

    welcome_text = THEME_MESSAGES['welcome'].format(
        days=COURSE_DAYS,
        price=COURSE_PRICE,
        currency=COURSE_CURRENCY,
        code="LIBERATION"
    )

    # Replace Subject X with actual name
    welcome_text = welcome_text.replace("–°—É–±—ä–µ–∫—Ç X", user_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí∞ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å - {COURSE_PRICE} {COURSE_CURRENCY}",
            callback_data="buy_course"
        )],
        [InlineKeyboardButton(
            text="üìö –û –∫—É—Ä—Å–µ",
            callback_data="course_info"
        )],
        [InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å",
            callback_data="show_help"
        )],
    ])

    try:
        await callback.message.edit_text(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception:
        pass

    await callback.answer()
