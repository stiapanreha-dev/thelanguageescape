"""
Start and basic command handlers
Registration, welcome messages, help
"""
import logging
import datetime as dt_module
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import COURSE_NAME, COURSE_PRICE, COURSE_CURRENCY, COURSE_DAYS, THEME_MESSAGES
from bot.database.models import User, Payment, PaymentStatus
from bot.keyboards.inline import get_welcome_keyboard, get_main_menu_keyboard

logger = logging.getLogger(__name__)

router = Router(name="start")


async def check_pending_payments(message: Message, session: AsyncSession, user: User):
    """
    Check if user has pending payments and activate if paid

    Args:
        message: Telegram message
        session: Database session
        user: User object
    """
    from bot.handlers.payment import payment_service

    if not payment_service:
        return

    try:
        # Get pending payments for this user
        result = await session.execute(
            select(Payment)
            .where(Payment.user_id == user.id)
            .where(Payment.status == PaymentStatus.PENDING)
            .order_by(Payment.created_at.desc())
        )
        pending_payments = result.scalars().all()

        if not pending_payments:
            return

        logger.info(f"Checking {len(pending_payments)} pending payments for user {user.telegram_id}")

        # Check each pending payment
        for payment in pending_payments:
            status, payment_info = await payment_service.check_payment_status(payment.payment_id)

            if status == "succeeded" and payment_info and payment_info.get("paid"):
                # Activate access
                user.has_access = True
                user.current_day = 1
                user.course_started_at = dt_module.datetime.utcnow()

                # Update payment status
                payment.status = PaymentStatus.SUCCEEDED
                payment.paid_at = dt_module.datetime.utcnow()

                await session.commit()

                logger.info(f"‚úÖ Auto-activated access for user {user.telegram_id} via payment {payment.payment_id}")

                # Send success message
                user_name = "–°—É–±—ä–µ–∫—Ç X"
                await payment_service.send_payment_success_message(
                    chat_id=message.chat.id,
                    user_name=user_name
                )

                return  # Found successful payment, stop checking

    except Exception as e:
        logger.error(f"Error checking pending payments for user {user.telegram_id}: {e}", exc_info=True)


@router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    """
    Handle /start command
    Register new user or welcome back existing user
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name or "Subject X"
    last_name = message.from_user.last_name

    logger.info(f"User {user_id} ({first_name}) started the bot")

    # Check if user exists
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if user:
        # Existing user
        # Don't update last_activity here - ActivityMiddleware handles it
        user.first_name = first_name
        user.last_name = last_name
        user.username = username
        await session.commit()

        if user.has_access:
            # User has access - show main menu
            await message.answer(
                f"‚ö° **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –°—É–±—ä–µ–∫—Ç X!**\n\n"
                f"–¢—ã –Ω–∞ **–î–Ω–µ {user.current_day}/{COURSE_DAYS}**\n"
                f"–ö–æ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è: `{user.liberation_code or '___________'}`\n\n"
                f"–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–±–µ–≥?",
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard(user.current_day, user.has_access)
            )
        else:
            # User exists but no access - check for pending payments
            await check_pending_payments(message, session, user)

            # If still no access after check, show purchase option
            await session.refresh(user)
            if not user.has_access:
                await send_welcome_message(message, "–°—É–±—ä–µ–∫—Ç X", is_new=False)

    else:
        # New user - create record
        new_user = User(
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            has_access=False,
            current_day=0,
        )
        session.add(new_user)
        await session.commit()

        logger.info(f"‚úÖ New user registered: {user_id} ({first_name})")

        # Send welcome message
        await send_welcome_message(message, "–°—É–±—ä–µ–∫—Ç X", is_new=True)


async def send_welcome_message(message: Message, user_name: str, is_new: bool = True):
    """Send welcome message with course info"""

    greeting = "üîì **Welcome to NeoVoice, Subject X**" if is_new else "‚ö° **Welcome back, Subject X**"

    welcome_text = THEME_MESSAGES['welcome'].format(
        days=COURSE_DAYS,
        price=COURSE_PRICE,
        currency=COURSE_CURRENCY
    )

    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_welcome_keyboard()
    )


@router.message(Command("help"))
async def cmd_help(message: Message, session: AsyncSession):
    """Show help message"""
    user_id = message.from_user.id

    # Check if user has access
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if user and user.has_access:
        help_text = """
üìö **How to use the bot**

**Navigation:**
üé¨ /day - Access current day's materials
üìä /progress - View your progress
üí¨ /help - Show this help

**Course Structure:**
Each day includes:
‚Ä¢ Video briefing (cyberpunk story)
‚Ä¢ PDF brief (vocabulary, grammar, dialogues)
‚Ä¢ 3-4 interactive tasks

**Tasks:**
‚úÖ **Choice** - Select correct answer (A/B/C/D)
üé§ **Voice** - Record yourself speaking
üí¨ **Dialog** - Interactive conversation

**Progress:**
Complete all tasks to unlock the next day.
Collect letters to form the secret code

**Tips:**
‚Ä¢ Take your time with each task
‚Ä¢ Watch videos carefully for clues
‚Ä¢ Read briefs thoroughly
‚Ä¢ Practice speaking out loud

Need support? Contact @your_support
"""
    else:
        help_text = """
üìö **About The Language Escape**

**What is it?**
A 10-day interactive English course in cyberpunk quest format.

**Who is it for?**
Beginners (A1-A2 level), ages 18-45, who want to learn English through gaming and sci-fi.

**What's included:**
üé¨ 10 days of cinematic videos
üìÑ PDF briefs with lessons
‚úçÔ∏è Interactive tasks with feedback
üé§ Voice challenges
üí¨ Dialog simulations
üèÜ Certificate upon completion

**How to start:**
1. Use /pay to purchase access
2. Complete payment
3. Start Day 1 immediately!

**Price:** {price} {currency}

Questions? Contact @your_support
""".format(price=COURSE_PRICE, currency=COURSE_CURRENCY)

    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("about"))
async def cmd_about(message: Message):
    """Show course information"""
    about_text = f"""
üåÉ **{COURSE_NAME}**

**The Story:**
You wake up in NeoVoice, a simulation created by the ShadowNet corporation to erase your identity. Hackers are stealing words, leaving you voiceless. But there's hope...

A mysterious hacker, Emma, appears with a message: *"Learn to speak, and you'll break free."*

**Your Mission:**
‚Ä¢ Complete {COURSE_DAYS} days of challenges
‚Ä¢ Collect letters to form the code LIBERATION
‚Ä¢ Escape the simulation

**What You'll Learn:**
‚Ä¢ Basic English vocabulary (200+ words)
‚Ä¢ Essential grammar structures
‚Ä¢ Real-life conversations
‚Ä¢ Pronunciation practice
‚Ä¢ Confidence in speaking

**Format:**
üì± Fully in Telegram bot
üéØ Self-paced learning
‚è±Ô∏è 20-30 minutes per day
üåç Available 24/7

**Level:** Beginner (A1-A2)
**Languages:** English (with Russian support)

Ready to escape? Use /pay to start!
"""

    await message.answer(about_text, parse_mode="Markdown")


@router.callback_query(F.data == "show_help")
async def callback_help(callback: CallbackQuery, session: AsyncSession):
    """Handle help button"""
    user_id = callback.from_user.id

    # Check if user has access
    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if user and user.has_access:
        help_text = (
            "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º\n\n"
            "–ù–∞–≤–∏–≥–∞—Ü–∏—è:\n"
            "üé¨ /day - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è\n"
            "üìä /progress - –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "üí¨ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞:\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "‚Ä¢ –í–∏–¥–µ–æ-–±—Ä–∏—Ñ–∏–Ω–≥ (–∫–∏–±–µ—Ä–ø–∞–Ω–∫ –∏—Å—Ç–æ—Ä–∏—è)\n"
            "‚Ä¢ PDF-–±—Ä–∏—Ñ–∏–Ω–≥ (—Å–ª–æ–≤–∞, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –¥–∏–∞–ª–æ–≥–∏)\n"
            "‚Ä¢ 3-4 –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è\n\n"
            "–ó–∞–¥–∞–Ω–∏—è:\n"
            "‚úÖ –í—ã–±–æ—Ä - –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (A/B/C/D)\n"
            "üé§ –ì–æ–ª–æ—Å - –ó–∞–ø–∏—à–∏ —Å–µ–±—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
            "üí¨ –î–∏–∞–ª–æ–≥ - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
            "–ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
            "–í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n"
            "–°–æ–±–∏—Ä–∞–π –±—É–∫–≤—ã —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–±–µ–≥–∞\n\n"
            "–°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å —Å –∫–∞–∂–¥—ã–º –∑–∞–¥–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ - —Ç–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            "‚Ä¢ –ß–∏—Ç–∞–π –±—Ä–∏—Ñ–∏–Ω–≥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –≤—Å–ª—É—Ö\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )
    else:
        help_text = (
            "üìö –û –∫—É—Ä—Å–µ The Language Escape\n\n"
            "–ß—Ç–æ —ç—Ç–æ?\n"
            "10-–¥–Ω–µ–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫-–∫–≤–µ—Å—Ç–∞.\n\n"
            "–î–ª—è –∫–æ–≥–æ?\n"
            "–ù–∞—á–∏–Ω–∞—é—â–∏–µ (A1-A2), 18-45 –ª–µ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ sci-fi.\n\n"
            "–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n"
            "üé¨ 10 –¥–Ω–µ–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
            "üìÑ PDF-–±—Ä–∏—Ñ–∏–Ω–≥–∏ —Å —É—Ä–æ–∫–∞–º–∏\n"
            "‚úçÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é\n"
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
            "üí¨ –°–∏–º—É–ª—è—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "üèÜ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é\n\n"
            "–ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π /pay –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
            "2. –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
            "3. –ù–∞—á–∞—Ç—å –î–µ–Ω—å 1 —Å—Ä–∞–∑—É!\n\n"
            f"–¶–µ–Ω–∞: {COURSE_PRICE} {COURSE_CURRENCY}\n\n"
            "–í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )

    # Send as plain text without parse_mode to avoid entity parsing
    try:
        await callback.message.edit_text(help_text, parse_mode=None)
    except Exception as e:
        logger.error(f"Error editing help message: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏", show_alert=True)
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery, session: AsyncSession):
    """Return to main menu"""
    user_id = callback.from_user.id

    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        await callback.answer("User not found. Use /start", show_alert=True)
        return

    menu_text = f"""
üéÆ **Main Menu**

Current progress: Day {user.current_day}/{COURSE_DAYS}
Code collected: `{user.liberation_code or '___________'}`

Choose an action:
"""

    await callback.message.edit_text(
        menu_text,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard(user.current_day, user.has_access)
    )
    await callback.answer()


@router.message(Command("menu"))
async def cmd_menu(message: Message, session: AsyncSession):
    """Show main menu"""
    user_id = message.from_user.id

    result = await session.execute(
        select(User).where(User.telegram_id == user_id)
    )
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("Please use /start first")
        return

    if not user.has_access:
        await send_welcome_message(message, "–°—É–±—ä–µ–∫—Ç X", is_new=False)
        return

    menu_text = f"""
üéÆ **Main Menu**

Current progress: Day {user.current_day}/{COURSE_DAYS}
Code collected: `{user.liberation_code or '___________'}`

Choose an action below:
"""

    await message.answer(
        menu_text,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard(user.current_day, user.has_access)
    )
